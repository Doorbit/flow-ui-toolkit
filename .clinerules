# Flow UI Toolkit Projektrichtlinien

## Dokumentationsanforderungen

- Aktualisiere die Dokumentation in /docs bei Änderungen an:
  - Technischer Dokumentation (technical_documentation.md)
  - Benutzerhandbuch (user_documentation.md)
- Halte README.md synchron mit neuen Features
- Dokumentiere Änderungen in CHANGELOG.md

## UI-Elemente & Komponenten

- Neue UI-Elemente müssen definiert werden in:
  - Interface in /src/models/uiElements.ts
  - Typ in der UIElement Union
  - createElement Factory in App.tsx
- Komponenten folgen der Struktur:
  - Platzierung in /src/components/[KomponentenName]/
  - Eigene Typescript-Datei pro Komponente
  - Separate Testdatei
  - Bei Bedarf eigener Stil mit styled-components

## State Management

- EditorContext für globalen Zustand nutzen
- Neue Aktionen in EditorContext.tsx definieren
- Reducer-Funktionen für Zustandsänderungen
- Undo/Redo-Funktionalität berücksichtigen

## Drag & Drop Standards

- React DnD für alle Drag & Drop Operationen
- DndProvider.tsx für zentrale DnD-Konfiguration
- Implementiere beide Interfaces:
  - DragSource für ziehbare Elemente
  - DropTarget für Zielbereich

## Testing Standards

- Unit Tests für:
  - Reducer-Funktionen
  - UI-Element-Logik
  - Hilfsfunktionen
- Komponententests mit React Testing Library
- Mock-Dateien in __mocks__ Verzeichnissen
- Integration Tests für:
  - Drag & Drop Funktionalität
  - JSON Import/Export
  - Undo/Redo Operationen

## Code Style & Muster

- TypeScript strikt verwenden
- Styled Components für Styling
- Material-UI Komponenten für UI-Elemente
- Funktionale Komponenten mit Hooks
- Props-Interfaces für alle Komponenten
- Mehrsprachigkeit über TranslatableString

## Fehlerbehandlung

- Validierung für:
  - JSON Import/Export
  - Element-Eigenschaften
  - Drag & Drop Operationen
- Benutzerfreundliche Fehlermeldungen
- Fehler-Recovery mit Undo/Redo

## Best Practices

- Komponenten-Komposition bevorzugen
- Pure Functions für Hilfsfunktionen
- Memoization für performance-kritische Berechnungen
- Lazy Loading für große Komponenten
- Konsistente Namensgebung:
  - PascalCase für Komponenten
  - camelCase für Funktionen/Variablen
  - UPPERCASE für Konstanten

## Vor Ausführung von Tests:

- Prüfe, ob ein Server bereits läuft (Port-Check durchführen)
- Führe "npm run start" nur aus, wenn kein Server auf dem definierten Port läuft
- Verwende existierende Server-Instanz, wenn bereits vorhanden


## Server-Prüfung mit:

- Prüfung auf Prozess mit lsof/netstat/SS für den definierten Port
- Oder HTTP-Request an den konfigurierten Endpunkt senden, um Erreichbarkeit zu testen
- Timeout-Parameter für Server-Prüfung konfigurierbar halten
