{"version":3,"file":"static/js/706.f5e1ba2e.chunk.js","mappings":"2KAKA,MAAMA,EAAwD,CAC5DC,cAAe,CACb,EAAK,OACL,EAAK,QACL,EAAK,MACL,EAAK,OACL,EAAK,UAGPC,iBAAkB,CAChB,OAAU,SACV,aAAgB,SAElBC,yBAA0B,CACxB,aAAgB,cAChB,YAAe,eAEjBC,gBAAiB,CACf,IAAO,UACP,MAAS,SACT,QAAW,UAEbC,cAAe,CACb,IAAO,QACP,MAAS,SAEXC,cAAe,CACb,KAAQ,YACR,GAAM,UACN,GAAM,WAERC,gBAAiB,CACf,SAAY,YACZ,MAAS,SASAC,EAAyBC,IAEpC,MAAMC,EAAiBC,KAAKC,MAAMD,KAAKE,UAAUJ,IAuCjD,OApCIC,EAAeI,aACjBJ,EAAeI,WAAaJ,EAAeI,WAAWC,KAAKC,IACrDA,EAAKC,WACPD,EAAKC,SAAWD,EAAKC,SAASF,KAAKG,IAC1B,CAAEC,QAASC,EAAiBF,EAAeC,cAKlDH,EAAKK,YACPL,EAAKK,UAAYL,EAAKK,UAAUN,KAAKO,IAC/BA,EAAQL,WACVK,EAAQL,SAAWK,EAAQL,SAASF,KAAKG,IAChC,CAAEC,QAASC,EAAiBF,EAAeC,cAG/CG,MAIJN,MAKPN,EAAea,aACjBb,EAAea,WAAab,EAAea,WAAWR,KAAKC,IACrDA,EAAKC,WACPD,EAAKC,SAAWD,EAAKC,SAASF,KAAKG,IAC1B,CAAEC,QAASC,EAAiBF,EAAeC,cAG/CH,MAIJN,CAAc,EAQjBU,EAAoBD,IACxB,IAAKA,IAAYA,EAAQK,aACvB,OAAOL,EAGT,MAAMM,EAAcN,EAAQK,aACtBE,EAAc1B,EAAcyB,GA8DlC,OA3DIC,GAAeP,EAAQQ,MAAQD,EAAYP,EAAQQ,QACrDR,EAAQQ,KAAOD,EAAYP,EAAQQ,OAIjB,kBAAhBF,GAAmCN,EAAQS,WAAaF,GAAeA,EAAYP,EAAQS,aAC7FT,EAAQS,UAAYF,EAAYP,EAAQS,YAItB,kBAAhBH,GAAmCN,EAAQU,iBAAmBV,EAAQW,qBACxEX,EAAQW,mBAAqBX,EAAQU,sBAC9BV,EAAQU,gBAIG,6BAAhBJ,GAA8CN,EAAQY,QAAUZ,EAAQa,UAC1Eb,EAAQa,QAAUb,EAAQY,aACnBZ,EAAQY,OAIG,oBAAhBN,QAAyDQ,IAApBd,EAAQe,cAAmDD,IAA1Bd,EAAQgB,gBAChFhB,EAAQgB,cAAgBhB,EAAQe,eACzBf,EAAQe,SAIG,mBAAhBT,GAAoCN,EAAQF,UAIrB,mBAAhBQ,GAAoCN,EAAQF,SAHrDE,EAAQF,SAAWE,EAAQF,SAASF,KAAKG,IAChC,CAAEC,QAASC,EAAiBF,EAAeC,aAM3B,oBAAhBM,GAELN,EAAQF,WACVE,EAAQF,SAAWE,EAAQF,SAASF,KAAKG,IAChC,CAAEC,QAASC,EAAiBF,EAAeC,cAKlDA,EAAQE,YACVF,EAAQE,UAAYF,EAAQE,UAAUN,KAAKO,IACrCA,EAAQL,WACVK,EAAQL,SAAWK,EAAQL,SAASF,KAAKG,IAChC,CAAEC,QAASC,EAAiBF,EAAeC,cAG/CG,OAGc,uBAAhBG,GAAwCN,EAAQiB,QACzDjB,EAAQiB,MAAQjB,EAAQiB,MAAMrB,IAAIK,IAG7BD,CAAO,C","sources":["utils/normalizeUtils.ts"],"sourcesContent":["import { ListingFlow } from '../models/listingFlow';\n\n/**\n * Maps abbreviated type values to their full counterparts for different element types\n */\nconst TYPE_MAPPINGS: Record<string, Record<string, string>> = {\n  DateUIElement: {\n    'Y': 'YEAR',\n    'M': 'MONTH',\n    'D': 'DAY',\n    'h': 'HOUR',\n    'm': 'MINUTE',\n    // 'YMD' wird nicht mehr zu 'DAY' konvertiert, sondern als eigener Typ beibehalten\n  },\n  BooleanUIElement: {\n    'TOGGLE': 'SWITCH', // Falls in manchen JSONs TOGGLE statt SWITCH verwendet wird\n    'RADIO_BUTTON': 'RADIO', // Normalisierung von RADIO_BUTTON zu RADIO\n  },\n  SingleSelectionUIElement: {\n    'BUTTON_GROUP': 'BUTTONGROUP', // Normalisierung von BUTTON_GROUP zu BUTTONGROUP\n    'RADIO_GROUP': 'BUTTONGROUP', // Weitere mögliche Variante\n  },\n  NumberUIElement: {\n    'INT': 'INTEGER', // Falls in manchen JSONs INT statt INTEGER verwendet wird\n    'FLOAT': 'DOUBLE', // Falls in manchen JSONs FLOAT statt DOUBLE verwendet wird\n    'DECIMAL': 'DOUBLE', // Weitere mögliche Variante\n  },\n  FileUIElement: {\n    'IMG': 'IMAGE', // Falls in manchen JSONs IMG statt IMAGE verwendet wird\n    'PHOTO': 'IMAGE', // Weitere mögliche Variante\n  },\n  TextUIElement: {\n    'TEXT': 'PARAGRAPH', // Falls in manchen JSONs TEXT statt PARAGRAPH verwendet wird\n    'H1': 'HEADING', // Weitere mögliche Variante\n    'H2': 'HEADING', // Weitere mögliche Variante\n  },\n  StringUIElement: {\n    'TEXTAREA': 'TEXT_AREA', // Normalisierung von TEXTAREA zu TEXT_AREA\n    'INPUT': 'TEXT', // Normalisierung von INPUT zu TEXT\n  },\n};\n\n/**\n * Normalisiert Elementtypen in einem ListingFlow-Objekt\n * @param flow Das zu normalisierende ListingFlow-Objekt\n * @returns Das normalisierte ListingFlow-Objekt\n */\nexport const normalizeElementTypes = (flow: ListingFlow): ListingFlow => {\n  // Deep copy erstellen, um das Original nicht zu verändern\n  const normalizedFlow = JSON.parse(JSON.stringify(flow));\n\n  // pages_edit normalisieren\n  if (normalizedFlow.pages_edit) {\n    normalizedFlow.pages_edit = normalizedFlow.pages_edit.map((page: any) => {\n      if (page.elements) {\n        page.elements = page.elements.map((elementWrapper: any) => {\n          return { element: normalizeElement(elementWrapper.element) };\n        });\n      }\n\n      // Auch sub_flows normalisieren, falls vorhanden\n      if (page.sub_flows) {\n        page.sub_flows = page.sub_flows.map((subFlow: any) => {\n          if (subFlow.elements) {\n            subFlow.elements = subFlow.elements.map((elementWrapper: any) => {\n              return { element: normalizeElement(elementWrapper.element) };\n            });\n          }\n          return subFlow;\n        });\n      }\n\n      return page;\n    });\n  }\n\n  // pages_view normalisieren\n  if (normalizedFlow.pages_view) {\n    normalizedFlow.pages_view = normalizedFlow.pages_view.map((page: any) => {\n      if (page.elements) {\n        page.elements = page.elements.map((elementWrapper: any) => {\n          return { element: normalizeElement(elementWrapper.element) };\n        });\n      }\n      return page;\n    });\n  }\n\n  return normalizedFlow;\n};\n\n/**\n * Normalisiert ein einzelnes Element und seine verschachtelten Elemente\n * @param element Das zu normalisierende Element\n * @returns Das normalisierte Element\n */\nconst normalizeElement = (element: any): any => {\n  if (!element || !element.pattern_type) {\n    return element;\n  }\n\n  const patternType = element.pattern_type;\n  const typeMapping = TYPE_MAPPINGS[patternType];\n\n  // Typzuordnung anwenden, falls für diesen pattern_type verfügbar\n  if (typeMapping && element.type && typeMapping[element.type]) {\n    element.type = typeMapping[element.type];\n  }\n\n  // Normalisiere file_type für FileUIElement (falls vorhanden)\n  if (patternType === 'FileUIElement' && element.file_type && typeMapping && typeMapping[element.file_type]) {\n    element.file_type = typeMapping[element.file_type];\n  }\n\n  // Normalisiere Feldnamen (z.B. accepted_types zu allowed_file_types)\n  if (patternType === 'FileUIElement' && element.accepted_types && !element.allowed_file_types) {\n    element.allowed_file_types = element.accepted_types;\n    delete element.accepted_types;\n  }\n\n  // Normalisiere SingleSelectionUIElement items zu options\n  if (patternType === 'SingleSelectionUIElement' && element.items && !element.options) {\n    element.options = element.items;\n    delete element.items;\n  }\n\n  // Normalisiere NumberUIElement default zu default_value\n  if (patternType === 'NumberUIElement' && element.default !== undefined && element.default_value === undefined) {\n    element.default_value = element.default;\n    delete element.default;\n  }\n\n  // Rekursiv verschachtelte Elemente normalisieren\n  if (patternType === 'GroupUIElement' && element.elements) {\n    element.elements = element.elements.map((elementWrapper: any) => {\n      return { element: normalizeElement(elementWrapper.element) };\n    });\n  } else if (patternType === 'ArrayUIElement' && element.elements) {\n    element.elements = element.elements.map((elementWrapper: any) => {\n      return { element: normalizeElement(elementWrapper.element) };\n    });\n  } else if (patternType === 'CustomUIElement') {\n    // Elemente in CustomUIElement\n    if (element.elements) {\n      element.elements = element.elements.map((elementWrapper: any) => {\n        return { element: normalizeElement(elementWrapper.element) };\n      });\n    }\n\n    // sub_flows in CustomUIElement\n    if (element.sub_flows) {\n      element.sub_flows = element.sub_flows.map((subFlow: any) => {\n        if (subFlow.elements) {\n          subFlow.elements = subFlow.elements.map((elementWrapper: any) => {\n            return { element: normalizeElement(elementWrapper.element) };\n          });\n        }\n        return subFlow;\n      });\n    }\n  } else if (patternType === 'ChipGroupUIElement' && element.chips) {\n    element.chips = element.chips.map(normalizeElement);\n  }\n\n  return element;\n};\n"],"names":["TYPE_MAPPINGS","DateUIElement","BooleanUIElement","SingleSelectionUIElement","NumberUIElement","FileUIElement","TextUIElement","StringUIElement","normalizeElementTypes","flow","normalizedFlow","JSON","parse","stringify","pages_edit","map","page","elements","elementWrapper","element","normalizeElement","sub_flows","subFlow","pages_view","pattern_type","patternType","typeMapping","type","file_type","accepted_types","allowed_file_types","items","options","undefined","default","default_value","chips"],"sourceRoot":""}