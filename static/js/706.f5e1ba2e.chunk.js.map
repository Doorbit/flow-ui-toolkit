{"version":3,"file":"static/js/706.f5e1ba2e.chunk.js","mappings":"2KAKA,MAAMA,EAAwD,CAC5DC,cAAe,CACb,EAAK,OACL,EAAK,QACL,EAAK,MACL,EAAK,OACL,EAAK,UAGPC,iBAAkB,CAChB,OAAU,SACV,aAAgB,SAElBC,yBAA0B,CACxB,aAAgB,cAChB,YAAe,eAEjBC,gBAAiB,CACf,IAAO,UACP,MAAS,SACT,QAAW,UAEbC,cAAe,CACb,IAAO,QACP,MAAS,SAEXC,cAAe,CACb,KAAQ,YACR,GAAM,UACN,GAAM,WAERC,gBAAiB,CACf,SAAY,YACZ,MAAS,SASAC,EAAyBC,IAEpC,MAAMC,EAAiBC,KAAKC,MAAMD,KAAKE,UAAUJ,IAuCjD,OApCIC,EAAeI,aACjBJ,EAAeI,WAAaJ,EAAeI,WAAWC,KAAKC,IACrDA,EAAKC,WACPD,EAAKC,SAAWD,EAAKC,SAASF,KAAKG,IAC1B,CAAEC,QAASC,EAAiBF,EAAeC,cAKlDH,EAAKK,YACPL,EAAKK,UAAYL,EAAKK,UAAUN,KAAKO,IAC/BA,EAAQL,WACVK,EAAQL,SAAWK,EAAQL,SAASF,KAAKG,IAChC,CAAEC,QAASC,EAAiBF,EAAeC,cAG/CG,MAIJN,MAKPN,EAAea,aACjBb,EAAea,WAAab,EAAea,WAAWR,KAAKC,IACrDA,EAAKC,WACPD,EAAKC,SAAWD,EAAKC,SAASF,KAAKG,IAC1B,CAAEC,QAASC,EAAiBF,EAAeC,cAG/CH,MAIJN,CAAc,EAQjBU,EAAoBD,IACxB,IAAKA,IAAYA,EAAQK,aACvB,OAAOL,EAGT,MAAMM,EAAcN,EAAQK,aACtBE,EAAc1B,EAAcyB,GA8DlC,OA3DIC,GAAeP,EAAQQ,MAAQD,EAAYP,EAAQQ,QACrDR,EAAQQ,KAAOD,EAAYP,EAAQQ,OAIjB,kBAAhBF,GAAmCN,EAAQS,WAAaF,GAAeA,EAAYP,EAAQS,aAC7FT,EAAQS,UAAYF,EAAYP,EAAQS,YAItB,kBAAhBH,GAAmCN,EAAQU,iBAAmBV,EAAQW,qBACxEX,EAAQW,mBAAqBX,EAAQU,sBAC9BV,EAAQU,gBAIG,6BAAhBJ,GAA8CN,EAAQY,QAAUZ,EAAQa,UAC1Eb,EAAQa,QAAUb,EAAQY,aACnBZ,EAAQY,OAIG,oBAAhBN,QAAyDQ,IAApBd,EAAQe,cAAmDD,IAA1Bd,EAAQgB,gBAChFhB,EAAQgB,cAAgBhB,EAAQe,eACzBf,EAAQe,SAIG,mBAAhBT,GAAoCN,EAAQF,UAIrB,mBAAhBQ,GAAoCN,EAAQF,SAHrDE,EAAQF,SAAWE,EAAQF,SAASF,KAAKG,IAChC,CAAEC,QAASC,EAAiBF,EAAeC,aAM3B,oBAAhBM,GAELN,EAAQF,WACVE,EAAQF,SAAWE,EAAQF,SAASF,KAAKG,IAChC,CAAEC,QAASC,EAAiBF,EAAeC,cAKlDA,EAAQE,YACVF,EAAQE,UAAYF,EAAQE,UAAUN,KAAKO,IACrCA,EAAQL,WACVK,EAAQL,SAAWK,EAAQL,SAASF,KAAKG,IAChC,CAAEC,QAASC,EAAiBF,EAAeC,cAG/CG,OAGc,uBAAhBG,GAAwCN,EAAQiB,QACzDjB,EAAQiB,MAAQjB,EAAQiB,MAAMrB,IAAIK,IAG7BD,CAAO,C","sources":["utils/normalizeUtils.ts"],"sourcesContent":["import { ListingFlow } from '../models/listingFlow';\r\n\r\n/**\r\n * Maps abbreviated type values to their full counterparts for different element types\r\n */\r\nconst TYPE_MAPPINGS: Record<string, Record<string, string>> = {\r\n  DateUIElement: {\r\n    'Y': 'YEAR',\r\n    'M': 'MONTH',\r\n    'D': 'DAY',\r\n    'h': 'HOUR',\r\n    'm': 'MINUTE',\r\n    // 'YMD' wird nicht mehr zu 'DAY' konvertiert, sondern als eigener Typ beibehalten\r\n  },\r\n  BooleanUIElement: {\r\n    'TOGGLE': 'SWITCH', // Falls in manchen JSONs TOGGLE statt SWITCH verwendet wird\r\n    'RADIO_BUTTON': 'RADIO', // Normalisierung von RADIO_BUTTON zu RADIO\r\n  },\r\n  SingleSelectionUIElement: {\r\n    'BUTTON_GROUP': 'BUTTONGROUP', // Normalisierung von BUTTON_GROUP zu BUTTONGROUP\r\n    'RADIO_GROUP': 'BUTTONGROUP', // Weitere mögliche Variante\r\n  },\r\n  NumberUIElement: {\r\n    'INT': 'INTEGER', // Falls in manchen JSONs INT statt INTEGER verwendet wird\r\n    'FLOAT': 'DOUBLE', // Falls in manchen JSONs FLOAT statt DOUBLE verwendet wird\r\n    'DECIMAL': 'DOUBLE', // Weitere mögliche Variante\r\n  },\r\n  FileUIElement: {\r\n    'IMG': 'IMAGE', // Falls in manchen JSONs IMG statt IMAGE verwendet wird\r\n    'PHOTO': 'IMAGE', // Weitere mögliche Variante\r\n  },\r\n  TextUIElement: {\r\n    'TEXT': 'PARAGRAPH', // Falls in manchen JSONs TEXT statt PARAGRAPH verwendet wird\r\n    'H1': 'HEADING', // Weitere mögliche Variante\r\n    'H2': 'HEADING', // Weitere mögliche Variante\r\n  },\r\n  StringUIElement: {\r\n    'TEXTAREA': 'TEXT_AREA', // Normalisierung von TEXTAREA zu TEXT_AREA\r\n    'INPUT': 'TEXT', // Normalisierung von INPUT zu TEXT\r\n  },\r\n};\r\n\r\n/**\r\n * Normalisiert Elementtypen in einem ListingFlow-Objekt\r\n * @param flow Das zu normalisierende ListingFlow-Objekt\r\n * @returns Das normalisierte ListingFlow-Objekt\r\n */\r\nexport const normalizeElementTypes = (flow: ListingFlow): ListingFlow => {\r\n  // Deep copy erstellen, um das Original nicht zu verändern\r\n  const normalizedFlow = JSON.parse(JSON.stringify(flow));\r\n\r\n  // pages_edit normalisieren\r\n  if (normalizedFlow.pages_edit) {\r\n    normalizedFlow.pages_edit = normalizedFlow.pages_edit.map((page: any) => {\r\n      if (page.elements) {\r\n        page.elements = page.elements.map((elementWrapper: any) => {\r\n          return { element: normalizeElement(elementWrapper.element) };\r\n        });\r\n      }\r\n\r\n      // Auch sub_flows normalisieren, falls vorhanden\r\n      if (page.sub_flows) {\r\n        page.sub_flows = page.sub_flows.map((subFlow: any) => {\r\n          if (subFlow.elements) {\r\n            subFlow.elements = subFlow.elements.map((elementWrapper: any) => {\r\n              return { element: normalizeElement(elementWrapper.element) };\r\n            });\r\n          }\r\n          return subFlow;\r\n        });\r\n      }\r\n\r\n      return page;\r\n    });\r\n  }\r\n\r\n  // pages_view normalisieren\r\n  if (normalizedFlow.pages_view) {\r\n    normalizedFlow.pages_view = normalizedFlow.pages_view.map((page: any) => {\r\n      if (page.elements) {\r\n        page.elements = page.elements.map((elementWrapper: any) => {\r\n          return { element: normalizeElement(elementWrapper.element) };\r\n        });\r\n      }\r\n      return page;\r\n    });\r\n  }\r\n\r\n  return normalizedFlow;\r\n};\r\n\r\n/**\r\n * Normalisiert ein einzelnes Element und seine verschachtelten Elemente\r\n * @param element Das zu normalisierende Element\r\n * @returns Das normalisierte Element\r\n */\r\nconst normalizeElement = (element: any): any => {\r\n  if (!element || !element.pattern_type) {\r\n    return element;\r\n  }\r\n\r\n  const patternType = element.pattern_type;\r\n  const typeMapping = TYPE_MAPPINGS[patternType];\r\n\r\n  // Typzuordnung anwenden, falls für diesen pattern_type verfügbar\r\n  if (typeMapping && element.type && typeMapping[element.type]) {\r\n    element.type = typeMapping[element.type];\r\n  }\r\n\r\n  // Normalisiere file_type für FileUIElement (falls vorhanden)\r\n  if (patternType === 'FileUIElement' && element.file_type && typeMapping && typeMapping[element.file_type]) {\r\n    element.file_type = typeMapping[element.file_type];\r\n  }\r\n\r\n  // Normalisiere Feldnamen (z.B. accepted_types zu allowed_file_types)\r\n  if (patternType === 'FileUIElement' && element.accepted_types && !element.allowed_file_types) {\r\n    element.allowed_file_types = element.accepted_types;\r\n    delete element.accepted_types;\r\n  }\r\n\r\n  // Normalisiere SingleSelectionUIElement items zu options\r\n  if (patternType === 'SingleSelectionUIElement' && element.items && !element.options) {\r\n    element.options = element.items;\r\n    delete element.items;\r\n  }\r\n\r\n  // Normalisiere NumberUIElement default zu default_value\r\n  if (patternType === 'NumberUIElement' && element.default !== undefined && element.default_value === undefined) {\r\n    element.default_value = element.default;\r\n    delete element.default;\r\n  }\r\n\r\n  // Rekursiv verschachtelte Elemente normalisieren\r\n  if (patternType === 'GroupUIElement' && element.elements) {\r\n    element.elements = element.elements.map((elementWrapper: any) => {\r\n      return { element: normalizeElement(elementWrapper.element) };\r\n    });\r\n  } else if (patternType === 'ArrayUIElement' && element.elements) {\r\n    element.elements = element.elements.map((elementWrapper: any) => {\r\n      return { element: normalizeElement(elementWrapper.element) };\r\n    });\r\n  } else if (patternType === 'CustomUIElement') {\r\n    // Elemente in CustomUIElement\r\n    if (element.elements) {\r\n      element.elements = element.elements.map((elementWrapper: any) => {\r\n        return { element: normalizeElement(elementWrapper.element) };\r\n      });\r\n    }\r\n\r\n    // sub_flows in CustomUIElement\r\n    if (element.sub_flows) {\r\n      element.sub_flows = element.sub_flows.map((subFlow: any) => {\r\n        if (subFlow.elements) {\r\n          subFlow.elements = subFlow.elements.map((elementWrapper: any) => {\r\n            return { element: normalizeElement(elementWrapper.element) };\r\n          });\r\n        }\r\n        return subFlow;\r\n      });\r\n    }\r\n  } else if (patternType === 'ChipGroupUIElement' && element.chips) {\r\n    element.chips = element.chips.map(normalizeElement);\r\n  }\r\n\r\n  return element;\r\n};\r\n"],"names":["TYPE_MAPPINGS","DateUIElement","BooleanUIElement","SingleSelectionUIElement","NumberUIElement","FileUIElement","TextUIElement","StringUIElement","normalizeElementTypes","flow","normalizedFlow","JSON","parse","stringify","pages_edit","map","page","elements","elementWrapper","element","normalizeElement","sub_flows","subFlow","pages_view","pattern_type","patternType","typeMapping","type","file_type","accepted_types","allowed_file_types","items","options","undefined","default","default_value","chips"],"sourceRoot":""}